
services:
  # ==========================================
  # Infrastructure Services
  # ==========================================

  # üóÑÔ∏è VAULT DATABASE - PostgreSQL backend for Vault
  postgres-vault:
    image: postgres:15
    container_name: library-postgres-vault
    environment:
      - POSTGRES_DB=vault
      - POSTGRES_USER=vault_user
      - POSTGRES_PASSWORD=vault_secure_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-vault-data:/var/lib/postgresql/data
      - ./setups/vault/init-vault-db.sql:/docker-entrypoint-initdb.d/init-vault-db.sql:ro
    networks:
      - libromesh-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vault_user -d vault"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # üè¶ VAULT SERVER - HashiCorp Vault 1.19 with PostgreSQL backend
  vault:
    image: hashicorp/vault:1.19
    container_name: library-vault
    ports:
      - "8200:8200"
      - "8201:8201"  # Cluster port
    depends_on:
      postgres-vault:
        condition: service_healthy
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_CLUSTER_ADDR=http://0.0.0.0:8201
      - VAULT_LOG_LEVEL=INFO
      - VAULT_LOG_FORMAT=json
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
      - vault-logs:/vault/logs
      - vault-config:/vault/config
      - ./setups/vault/vault-config.hcl:/vault/config/vault.hcl:ro
    networks:
      - libromesh-network
    command: vault server -config=/vault/config/vault.hcl
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 8
      start_period: 45s
    restart: unless-stopped

  # üîß VAULT INITIALIZER - Enhanced initialization for Vault 1.19
  vault-init:
    image: hashicorp/vault:1.19
    container_name: library-vault-init
    depends_on:
      vault:
        condition: service_healthy
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=myroot
      - VAULT_FORMAT=json
    volumes:
      - ./setups/vault/setup-vault.sh:/setup-vault.sh:ro
      - vault-init-output:/vault-output
    networks:
      - libromesh-network
    command: ["/bin/sh", "/setup-vault.sh"]
    restart: "no"

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.4
    container_name: libromesh-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - libromesh-network

  kafka:
    image: confluentinc/cp-kafka:7.7.4
    container_name: libromesh-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - libromesh-network

  # Kafka UI (Optional - for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: libromesh-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8089:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: libromesh-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - libromesh-network

  # Keycloak Database
  keycloak-db:
    image: postgres:15
    container_name: libromesh-keycloak-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - libromesh-network

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: libromesh-keycloak
    restart: unless-stopped
    command: start-dev
    depends_on:
      - keycloak-db
    ports:
      - "8180:8080"
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
    networks:
      - libromesh-network

  # ==========================================
  # Service-Specific PostgreSQL Databases
  # ==========================================

  # User Service Database


# ==========================================
# Volumes
# ==========================================
volumes:
  # Infrastructure volumes
  redis_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  keycloak_db_data:
  postgres-vault-data:
  vault-data:
  vault-logs:
  vault-config:
  vault-init-output:

# ==========================================
# Networks
# ==========================================
networks:
  libromesh-network:
    driver: bridge
    name: libromesh-network