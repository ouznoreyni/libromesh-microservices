services:
  # ==========================================
  # Infrastructure Services
  # ==========================================

  # HashiCorp Vault
  vault:
    image: hashicorp/vault:1.19
    container_name: libromesh-vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./setups/vault/init-secrets.sh:/vault/init-secrets.sh:ro
    command: vault server -dev -dev-root-token-id=root-token -dev-listen-address=0.0.0.0:8200
#    command: |
#      sh -c "
#        vault server -dev -dev-root-token-id=root-token -dev-listen-address=0.0.0.0:8200 &
#        VAULT_PID=$$!
#
#        # Wait for Vault to be ready
#        until vault status > /dev/null 2>&1; do
#          echo 'Waiting for Vault to start...'
#          sleep 2
#        done
#
#        # Initialize secrets
#        chmod +x /vault/init-secrets.sh
#        /vault/init-secrets.sh
#
#        # Keep Vault running
#        wait $$VAULT_PID
#      "
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - libromesh-network
  # Vault Secrets Initializer
  vault-init:
    image: hashicorp/vault:1.19
    container_name: libromesh-vault-init
    depends_on:
      vault:
        condition: service_healthy
    environment:
      VAULT_ADDR: http://vault:8200
      VAULT_TOKEN: root-token
    volumes:
      - ./setups/vault/init-secrets.sh:/tmp/init-secrets.sh:ro
    command: |
      sh -c "
        echo 'Starting Vault secrets initialization...'
        sh /tmp/init-secrets.sh
        echo 'Vault secrets initialization completed successfully!'
      "
    networks:
      - libromesh-network
    restart: "no"

  # Apache Kafka with Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.4
    container_name: libromesh-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - libromesh-network

  kafka:
    image: confluentinc/cp-kafka:7.7.4
    container_name: libromesh-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - libromesh-network

  # Kafka UI (Optional - for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: libromesh-kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8089:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: libromesh-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - libromesh-network

  # Keycloak Database
  keycloak-db:
    image: postgres:15
    container_name: libromesh-keycloak-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak_password
    volumes:
      - keycloak_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U keycloak -d keycloak"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - libromesh-network

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:26.2
    container_name: libromesh-keycloak
    restart: unless-stopped
    command: start-dev --import-realm
    depends_on:
      - keycloak-db
      - vault-init
    ports:
      - "8180:8080"
    environment:
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://keycloak-db:5432/keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak_password
      # LibroMesh Application Environment Variables
      LIBROMESH_CLIENT_SECRET: ${LIBROMESH_CLIENT_SECRET:-libromesh-secret-2024}
      LIBROMESH_URL: ${LIBROMESH_URL:-http://localhost:8080}
      LIBROMESH_ADMIN_EMAIL: ${LIBROMESH_ADMIN_EMAIL:-admin@libromesh.local}
      LIBROMESH_ADMIN_USERNAME: ${LIBROMESH_ADMIN_USERNAME:-admin}
      LIBROMESH_ADMIN_PASSWORD: ${LIBROMESH_ADMIN_PASSWORD:-admin123}
      LIBROMESH_LIBRARIAN_EMAIL: ${LIBROMESH_LIBRARIAN_EMAIL:-librarian@libromesh.local}
      LIBROMESH_LIBRARIAN_USERNAME: ${LIBROMESH_LIBRARIAN_USERNAME:-librarian}
      LIBROMESH_LIBRARIAN_PASSWORD: ${LIBROMESH_LIBRARIAN_PASSWORD:-librarian123}
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health/ready || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
    volumes:
      - ./setups/keycloak/realm.json:/opt/keycloak/data/import/realm.json:ro
    networks:
      - libromesh-network

# ==========================================
# Volumes
# ==========================================
volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  keycloak_db_data:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local

# ==========================================
# Networks
# ==========================================
networks:
  libromesh-network:
    driver: bridge
    name: libromesh-network